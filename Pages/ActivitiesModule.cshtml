@page
@model TeamsHubWebClient.Pages.ActivitiesModule
@{
    Layout = null;
    ViewData["Title"] = "Modulo de actividades";
    var taskListJson = System.Text.Json.JsonSerializer.Serialize(Model.TaskList);

}
<!DOCTYPE html>
<html lang="es">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Actividades</title>
    <link href="/lib/fileinput/fileinput.min.css" media="all" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" href="/css/activitiesStyles.css">
</head>

<body>
    <div class="sidebar">
        <a href="/"><img src="https://cdn-icons-png.flaticon.com/512/5956/5956494.png" alt="Project Icon"
                class="icon"></a>
        <a href="/ActivitiesModule"><img src="https://cdn-icons-png.flaticon.com/512/7891/7891841.png" alt="Task Icon"
                class="icon"></a>
        <a href="/FileModule"><img src="https://cdn-icons-png.flaticon.com/512/14779/14779557.png" alt="Download Icon"
                class="icon"></a>
        <a href="/Login"><img src="https://cdn-icons-png.flaticon.com/512/1716/1716282.png" alt="Exit Icon"
                class="icon"></a>
    </div>

    <div class="main-container">
        <div class="header">
            <img src="https://cdn-icons-png.flaticon.com/512/4885/4885344.png" alt="Back Arrow" class="back-arrow"
                onclick="goBack()">
            <h1>@SinglentonClasses.ProjectSinglenton.Name</h1>
            <button class="new-activity-button" onclick="openForm()">Nueva Actividad</button>
        </div>
        <div class="columns">
            <div class="column" id="pending">
                <h2>Actividades Pendientes</h2>
                <div class="activities" id="pending-activities"></div>
            </div>
            <div class="column" id="in-process">
                <h2>Actividades en proceso</h2>
                <div class="activities" id="in-process-activities"></div>
            </div>
            <div class="column" id="completed">
                <h2>Actividades Terminadas</h2>
                <div class="activities" id="completed-activities"></div>
            </div>
        </div>
    </div>

    <div id="activity-form" class="modal">
        <div class="modal-content">
            <span class="close-button" onclick="closeForm()">&times;</span>
            <h2>Agregar/Editar Actividad</h2>
            <form method="post">
                <input type="hidden" id="task-id" name="Task.IdTask" asp-for="Task.IdTask" />
                <label for="name">Nombre de la Actividad:</label>
                <input type="text" id="name" name="Task.Name" asp-for="Task.Name" required>

                <label for="start-date">Fecha de inicio:</label>
                <input type="date" id="start-date" name="Task.StartDate" asp-for="Task.StartDate" required>

                <label for="end-date">Fecha de cierre:</label>
                <input type="date" id="end-date" name="Task.EndDate" asp-for="Task.EndDate" required>

                <label for="description">Descripción:</label>
                <textarea id="description" name="Task.Description" asp-for="Task.Description" required></textarea>

                <label for="status">Estado:</label>
                <select id="status" name="Task.Status" asp-for="Task.Status" required>
                    <option value="Actividad Pendiente">Pendiente</option>
                    <option value="Actividad en proceso">En proceso</option>
                    <option value="Actividad Finalizada">Terminada</option>
                </select>

                <button type="submit">Guardar</button>
            </form>
        </div>
    </div>

    <script>
        let TaskList = @Html.Raw(taskListJson);
        let activities = [];

        document.addEventListener('DOMContentLoaded', () => {
            loadActivities();
        });

        function goBack() {
            RedirectToPage("/");
        }

        function openForm(activity = null) {
            document.getElementById('activity-form').style.display = 'flex';
            if (activity) {
                document.getElementById('task-id').value = activity.id; // Asegúrate de que 'activity.id' sea el ID correcto
                document.getElementById('name').value = activity.name;
                document.getElementById('start-date').value = activity.startDate;
                document.getElementById('end-date').value = activity.endDate;
                document.getElementById('description').value = activity.description;
                document.getElementById('status').value = activity.status;
            } else {
                document.getElementById('form').reset();
                document.getElementById('task-id').value = 0; // O el valor predeterminado para una nueva tarea
                document.getElementById('status').value = 'Actividad Pendiente';
            }
        }


        function closeForm() {
            document.getElementById('activity-form').style.display = 'none';
        }

        function saveActivity() {
            const name = document.getElementById('name').value;
            const startDate = document.getElementById('start-date').value;
            const endDate = document.getElementById('end-date').value;
            const description = document.getElementById('description').value;
            const status = document.getElementById('status').value;

            const newActivity = {
                name,
                startDate,
                endDate,
                description,
                status
            };

            activities.push(newActivity);
            closeForm();
            renderActivities();
        }

        function loadActivities() {
            activities = TaskList.map(task => ({
                id: task.IdTask, // Asegúrate de que 'task.IdTask' sea el campo correcto
                name: task.Name,
                startDate: task.StartDate ? new Date(task.StartDate).toISOString().split('T')[0] : '',
                endDate: task.EndDate ? new Date(task.EndDate).toISOString().split('T')[0] : '',
                description: task.Description || '',
                status: task.Status || '',
            }));

            console.log("Mapped Activities:", activities);

            renderActivities();
        }


        function renderActivities() {
            const pendingContainer = document.getElementById('pending-activities');
            const inProcessContainer = document.getElementById('in-process-activities');
            const completedContainer = document.getElementById('completed-activities');

            pendingContainer.innerHTML = '';
            inProcessContainer.innerHTML = '';
            completedContainer.innerHTML = '';

            activities.forEach(activity => {
                const card = document.createElement('div');
                card.classList.add('card');
                card.innerHTML = `
                <div class="progress-bar ${activity.status}"></div>
                <h3>${activity.name}</h3>
                <p><strong>Inicio:</strong> ${activity.startDate}</p>
                <p><strong>Cierre:</strong> ${activity.endDate}</p>
            `;
                card.onclick = () => openForm(activity);

                if (activity.status === 'Actividad Pendiente') {
                    pendingContainer.appendChild(card);
                } else if (activity.status === 'Actividad en proceso') {
                    inProcessContainer.appendChild(card);
                } else if (activity.status === 'Actividad Finalizada') {
                    completedContainer.appendChild(card);
                }
            });
        }

        function moveCard(activity, sourceContainerId, targetContainerId) {
            const sourceContainer = document.getElementById(sourceContainerId);
            const targetContainer = document.getElementById(targetContainerId);
            const card = sourceContainer.querySelector(`[data-activity-id="${activity.id}"]`);

            if (card) {
                targetContainer.appendChild(card.cloneNode(true));
                sourceContainer.removeChild(card);
            }
        }

        function updateStatus(activity, newStatus) {
            const currentStatus = activity.status;
            const currentContainerId = `${currentStatus}-activities`;
            const newContainerId = `${newStatus}-activities`;

            moveCard(activity, currentContainerId, newContainerId);
            activity.status = newStatus;
        }

    </script>
</body>

</html>